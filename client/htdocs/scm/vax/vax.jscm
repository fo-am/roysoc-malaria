;; -*- mode: scheme; -*-
;; Royal Soc Malaria Copyright (C) 2018 FoAM Kernow

(load "scm/game/canvas.jscm")

(define receptor-create-distance 5)
(define receptor-types (list "A" "B" "C" "D"))
(define receptor-a-col (vector 1 0 0))
(define receptor-b-col (vector 0 1 0))
(define receptor-c-col (vector 0 0 1))
(define receptor-d-col (vector 1 1 0))

(define parasite-create-distance 10)
(define parasite-num-receptors 5)
(define parasite-col (vector 1 0.5 0.2))
(define parasite-repel 0.5)
(define parasite-cluster -0.08)

;; posisiton is relative to parasite
(define (make-receptor type pos parasite-id) 
  (list type pos parasite-id))

;; don't need root, just parent and forget...
(define (receptor-type r) (list-ref r 0))
(define (receptor-pos r) (list-ref r 1))
(define (receptor-parasite-id r) (list-ref r 2))

(define (build-receptor type pid)
  (let ((pos (vmul (vector (crndf) (crndf) 0) receptor-create-distance)))
    ;; parenting and forgetting - will be deleted when
    ;; parent is destroyed
    (with-state
     (cond 
      ((eq? type "A") (colour receptor-a-col))
      ((eq? type "B") (colour receptor-b-col))
      ((eq? type "C") (colour receptor-c-col))
      (else (colour receptor-d-col)))
     (parent pid)
     (translate pos)
     (scale (vector 0.25 0.25 0.25))
     (build-cube))
    (make-receptor type pos pid)))
  
(define (build-receptors n magic pid)
  (cons
   (build-receptor magic pid)
   (build-list
    (- n 1)
    (lambda (_) (build-receptor (choose receptor-types) pid)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-parasite id pos age receptors root)
	(list id pos age receptors root))

(define (parasite-id p) (list-ref p 0))
(define (parasite-pos p) (list-ref p 1))
(define (parasite-age p) (list-ref p 2))
(define (parasite-receptors p) (list-ref p 3))
(define (parasite-root p) (list-ref p 4))

;; lazily reuse primitive ids as parasite ids
(define (build-parasite pos magic)
  (let ((pid (with-state
	      (colour parasite-col)
	      (translate pos)
	      (build-cube))))
    (make-parasite
     pid pos 0
     (build-receptors parasite-num-receptors magic pid)
     pid)))

(define (parasite-closest parasite p)
  (let ((closest 999999))
    (foldl
     (lambda (other r)
       (if (not (eq? (parasite-id other) 
		     (parasite-id parasite)))
	   (let ((dist (vdist (parasite-pos parasite)
			      (parasite-pos other))))
	     (if (< dist closest)
		 (begin
		   (set! closest dist)
		   (parasite-pos other))
		 r))
	   r))
     #f p)))

(define (parasite-swarm pos closest)
  (let ((diff (vsub pos closest)))
    (vadd
     pos
     (vadd 
      (vmul (vmul (vnormalise diff) parasite-repel) 
	    (/ 1 (vmag diff)))
      (vmul (vnormalise pos) parasite-cluster)))))

(define (update-parasite p parasites)
  (let ((new-pos (parasite-swarm (parasite-pos p)
				 (parasite-closest p parasites))))
    (with-primitive
     (parasite-root p)
     (identity)
     ;; scale age...
     (translate new-pos))     
    (make-parasite
     (parasite-id p)
     new-pos 
     (+ (parasite-age p) 1) 
     (parasite-receptors p)
     (parasite-root p))))

(define (update-parasites parasites)
  (map
   (lambda (p)
     (update-parasite p parasites))
   parasites))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-parasites n magic)
  (build-list
   n
   (lambda (_)
     (build-parasite (vmul (vector (crndf) (crndf) 0)
			   parasite-create-distance)
		     magic))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define parasites (build-parasites 50 "A"))

;;(clear-colour (vector 0.0 0.0 0.0))
(resize-glcanvas webgl-canvas)

(define (render-game)
  (set! parasites (update-parasites parasites))
)

(every-frame render-game)
