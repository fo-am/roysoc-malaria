;; -*- mode: scheme; -*-
;; Royal Soc Malaria Copyright (C) 2018 FoAM Kernow

(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")

(define receptor-create-distance 0.5)
(define receptor-types (list "A" "B" "C" "D"))
(define receptor-a-col (vector 1 0 0))
(define receptor-b-col (vector 0 1 0))
(define receptor-c-col (vector 0 0 1))
(define receptor-d-col (vector 1 1 0))

(define parasite-create-distance 10)
(define parasite-num-receptors 5)

;; 85 6d 9b b6

(define parasite-col (vector (/ 0x85 255)
			     (/ 0x6d 255)
			     (/ 0x9b 255)))
(define parasite-repel 0.05)
(define parasite-cluster -0.002)
(define parasite-inertia 0.95)
(define parasite-max-age 100)
(define parasite-growth-speed 0.1)
(define parasite-max-pop 60)
(define parasite-spawn-distance 1)

(define parasites-start-num 3)

(define vax-inertia 0.05)
(define vax-speed -0.5)
(define vax-collide-distance 0.5)

;; posisiton is relative to parasite
(define (make-receptor type pos parasite-id) 
  (list type pos parasite-id))

;; don't need root, just parent and forget...
(define (receptor-type r) (list-ref r 0))
(define (receptor-pos r) (list-ref r 1))
(define (receptor-parasite-id r) (list-ref r 2))

(define (build-receptor pos type pid)
  ;; parenting and forgetting - will be deleted when
  ;; parent is destroyed
  (with-state
   (cond 
    ((eq? type "A") (colour receptor-a-col))
    ((eq? type "B") (colour receptor-b-col))
    ((eq? type "C") (colour receptor-c-col))
    (else (colour receptor-d-col)))
   (parent pid)
   (translate pos)
   ;;(texture (load-texture "circle-trans.png"))
   ;;(shader-assign-compiled "default")
   ;;(load-primitive "models/plane.obj")

   (shader-assign-compiled "receptor")   
   (texture (load-texture "noise.png"))
   (load-primitive "models/circlefansmall.obj")

   )
  (make-receptor type pos pid))

(define squash 0.4)
  
(define (build-receptors n magic pid)
  (let ((start (* (rndf) 2 3.141)))
    (cons
     (build-receptor 
      (vmul (vector (* (sin start) squash) (cos start) 0) receptor-create-distance)
      magic pid)
     (build-list
      (- n 1)
      (lambda (i) 
	(build-receptor 
	 (vmul (vector (* (sin (+ start (* (/ (+ i 1) n) 2 3.141))) squash)
		       (cos (+ start (* (/ (+ i 1) n) 2 3.141)))
		       0)
	       receptor-create-distance)
	 (choose receptor-types) pid))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-parasite id pos vel age receptors root)
	(list id pos vel age receptors root))

(define (parasite-id p) (list-ref p 0))
(define (parasite-pos p) (list-ref p 1))
(define (parasite-vel p) (list-ref p 2))
(define (parasite-age p) (list-ref p 3))
(define (parasite-receptors p) (list-ref p 4))
(define (parasite-root p) (list-ref p 5))

(define (parasite-prim)
  (with-state
   (hint-nozwrite)
   (shader-assign-compiled "parasite")
   (colour parasite-col)
   (texture (load-texture "noise.png"))
   (load-primitive "models/malaria.obj")))

;; lazily reuse primitive ids as parasite ids
(define (build-parasite pos magic)
  (let ((pid (parasite-prim)))
    (make-parasite
     pid pos 
     (vector 0 0 0) 
     (* (rndf) 100)
     (build-receptors parasite-num-receptors magic pid)
     pid)))

(define (parasite-spawn pos)
  (let ((pid (parasite-prim)))
    (make-parasite
     pid pos 
     (vector 0 0 0) 
     (random 10)
     ;; todo: inherit
     (build-receptors  parasite-num-receptors "A" pid)
     pid)))

(define (parasite-closest parasite p)
  (let ((closest 999999))
    (foldl
     (lambda (other r)
       (if (not (eq? (parasite-id other) 
		     (parasite-id parasite)))
	   (let ((dist (vdist (parasite-pos parasite)
			      (parasite-pos other))))
	     (if (< dist closest)
		 (begin
		   (set! closest dist)
		   (parasite-pos other))
		 r))
	   r))
     (vector 0 0 0) p)))

(define (parasite-swarm vel pos closest)
  (let ((diff (vsub pos closest)))
    (vadd
     (vmul vel parasite-inertia)
     (vmul
      (vadd 
       (vmul (vmul (vnormalise diff) parasite-repel) 
	     (Math.pow (/ 1 (vmag diff)) 1.5))
       (vmul (vnormalise pos) parasite-cluster))
      (/ 1 parasite-inertia)))))

(define (update-parasite p parasites)
  (let ((new-vel (parasite-swarm 
		  (parasite-vel p)
		  (parasite-pos p)
		  (parasite-closest p parasites))))
    (with-primitive
     (parasite-root p)
     (identity)
     ;; (when (zero? (random 5))
     ;; 	   (texture (load-texture
     ;; 		     (let ((t (random 3)))
     ;; 		       (cond 
     ;; 			((eq? t 0) "mal1-1.png")
     ;; 			((eq? t 1) "mal1-2.png")
     ;; 			(else "mal1-3.png"))))))
     (shader-shared-uniform! "time" "f" (time))
     (translate (parasite-pos p))
     (let ((sc (+ 2 (* (/ (parasite-age p) parasite-max-age) 4))))
       (scale (vector sc sc 0.01)))
     )
    (make-parasite
     (parasite-id p)
     (vadd (parasite-pos p) new-vel)
     new-vel
     (+ (parasite-age p) parasite-growth-speed) 
     (parasite-receptors p)
     (parasite-root p))))

(define (parasites-spawn parasites)
  (foldl
   (lambda (p r)
     (cond 
      ((> (parasite-age p) parasite-max-age)
       (destroy (parasite-root p))
       (if (< (length parasites) parasite-max-pop)
	   (let ((new-pos (vector (crndf) (crndf) 0)))
	     (append
	      (list (parasite-spawn (vadd (parasite-pos p) (vmul new-pos parasite-spawn-distance)))
		    (parasite-spawn (vadd (parasite-pos p) (vmul new-pos (- parasite-spawn-distance)))))
	      r))
	   r))
      (else (cons p r))))
   '()
   parasites))

(define (parasites-destroy parasites destroyed)
  (foldl
   (lambda (p r)
     (cond 
      ((list-contains? destroyed (parasite-id p))
       (destroy (parasite-root p))
       r)
      (else (cons p r))))
   '()
   parasites))

(define (parasites-destroy-all parasites)
  (for-each
   (lambda (p)
     (destroy (parasite-root p)))
   parasites))

;; (define (parasites-contain parasites)
;;   (map
;;    (lambda (p)
;;      (if (> (vdist (vector 0 0 0) (parasite-pos p)) 10)
;; 	 (make-parasite
;; 	  (parasite-id p)
;; 	  (vadd (parasite-pos p) new-vel)
;; 	  new-vel
;; 	  (+ (parasite-age p) parasite-growth-speed) 
;; 	  (parasite-receptors p)
;; 	  (parasite-root p))))

			   
(define (update-parasites parasites)
  (cond 
   ((zero? (length parasites)) ;; win
    (build-parasites parasites-start-num "A"))
   ((> (length parasites) parasite-max-pop) ;; lose
    (parasites-destroy-all parasites)
    (build-parasites parasites-start-num "A"))
   (else
    (parasites-spawn
     (map
      (lambda (p)
	(update-parasite p parasites))
      parasites)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (parasites-search pid parasites)
  (cond
   ((null? parasites) #f)
   ((eq? (parasite-id (car parasites)) pid)
    (car parasites))
   (else
    (parasites-search pid (cdr parasites)))))
   
(define (build-parasites n magic)
  (build-list
   n
   (lambda (_)
     (build-parasite 
      (vmul (vector (crndf) (crndf) 0)
	    parasite-create-distance)
      magic))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-vax pid dest vel pos root collide)
  (list pid dest vel pos root collide))

(define (vax-pid v) (list-ref v 0))
(define (vax-dest v) (list-ref v 1))
(define (vax-vel v) (list-ref v 2))
(define (vax-pos v) (list-ref v 3))
(define (vax-root v) (list-ref v 4))
(define (vax-collide v) (list-ref v 5))

(define (build-vax)
  (make-vax
   -1 (vector 0 0 0) (vector 0 0 0) (vector 0 0 0)
   (with-state
    (texture (load-texture "circle-trans.png"))
    (shader-assign-compiled "default")
    (load-primitive "models/plane.obj"))
   #f))

(define (calc-vax-swarm pos vel dest)
  (let ((v (vmul (vnormalise (vsub pos dest)) vax-speed)))
    (vadd (vmul v vax-inertia)
	  (vmul vel (- 1 vax-inertia))
	  )))

(define (vax-inject vs)
  (map
   (lambda (v)
     (make-vax
      -1
      (vector 0 0 0)
      (vector 0 (+ 0.3 (* (rndf) 0.5)) 0)
      (vadd (vector (+ (crndf) 0.3) (* (crndf) 2.5) 0) (vector 0 -8.3 0))
      (vax-root v)
      #f))
   vs))

;; special id code for inside the syringe
(define in-syringe -99)

(define (vax-in-syringe vs)
  (map
   (lambda (v)
     (make-vax
      in-syringe
      (vector 0 0 0)
      (vector 0 0 0)
      (vadd (vector (+ (crndf) 0.3) (* (crndf) 2.5) 0) (vector 0 -8.3 0))
      (vax-root v)
      #f))
   vs))


(define (vax-colour! vs col)
  (for-each
   (lambda (v)
     (with-primitive (vax-root v) (colour col)))
   vs))

(define (update-vax-swarm vs parasites)
  (map
   (lambda (v)
     (with-primitive
      (vax-root v) 
      (when (and (not (eq? (vax-pid v) in-syringe)) 
		 (< (rndf) 0.01))
	    (hide #t))
      (identity)
      (if (eq? (vax-pid v) in-syringe) 
	  (translate (vadd (vector (crndf) (crndf) 0) (vax-pos v)))
	  (translate (vax-pos v)))
      (scale (vector 0.5 0.5 0.01)))

     (if (eq? (vax-pid v) in-syringe)
	 v
	 (let ((p (parasites-search (vax-pid v) parasites)))
	   (cond 
	    (p
	     (let ((dist (vdist (vax-pos v) (vax-dest v))))
	       (make-vax
		(vax-pid v)
		(vadd (vax-dest v) (parasite-vel p)) 
		(calc-vax-swarm (vax-pos v) (vax-vel v) (vax-dest v))
		(vadd (vax-pos v) (vax-vel v))
		(vax-root v)
		(< dist vax-collide-distance))))
	    (else
	     (let ((p (choose parasites)))
	       (with-primitive (vax-root v) (hide #f))
	       (make-vax
		(parasite-id p)
		(vadd (parasite-pos p) (receptor-pos (choose (parasite-receptors p))))
		(vax-vel v)
		(vax-pos v)
		(vax-root v)
		#f)))))))
   vs))

(define (vax-destroyed-list vs)
  (foldl
   (lambda (v r)
     (if (vax-collide v) (cons (vax-pid v) r) r))
   '()
   vs))

(define (build-vax-swarm n)
  (build-list n (lambda (_) (build-vax))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 2D schenanigans

(define syringe-button '())

(define (render-canvas)
  (image-button-update vial1-button 0)
  (image-button-update vial2-button 0)
  (animated-button-update syringe-button 0)

  (animated-button-render! syringe-button)
  (image-button-render! vial1-button)
  (image-button-render! vial2-button)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")
(shader-compile "parasite" (list "p" "n" "t" "c")
		"shaders/parasite.vert"
		"shaders/parasite.frag")
(shader-compile "receptor" (list "p" "n" "t" "c")
		"shaders/receptor.vert"
		"shaders/receptor.frag")

(load-texture "mal1-1.png")
(load-texture "mal1-2.png")
(load-texture "mal1-3.png")
(load-texture "circle-trans.png")
(load-texture "noise.png")

(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/circlefan.obj")
(load-mesh-cache "models/circlemesh.obj")
(load-mesh-cache "models/circlefansmall.obj")
(load-mesh-cache "models/malaria.obj")

(load-images!
 (list
  "syringe.png"
  "plunger.png"
  "vial.png"
  )
 (lambda ()
   0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define parasites '())
(define vax-swarm-a '())

(define recep '())

(define current-vax "red")

(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  (set! parasites (update-parasites parasites))
  (set! vax-swarm-a (update-vax-swarm vax-swarm-a parasites))
  (set! parasites (parasites-destroy parasites (vax-destroyed-list vax-swarm-a)))

  (ctx.clearRect 0 0 screen-width screen-height)	  
  (render-canvas)

  (with-primitive recep (shader-shared-uniform! "time" "f" (time)))

  )

(define init #f)

(define (run-init)
  (resize-glcanvas webgl-canvas)
  (canvas-setup)
  (resize-canvas canvas)

  (set! vax-swarm-a (vax-inject (build-vax-swarm 200)))
  (set! parasites (build-parasites 3 "A"))

  (set! recep (with-state
	       (shader-assign-compiled "receptor")   
	       (build-cube)))

  (set! vial1-button 
	(make-image-button 
	 200 540 "vial.png" "" 
	 (lambda (x) 
	   (set! vax-swarm-a (vax-in-syringe vax-swarm-a))
	   (vax-colour! vax-swarm-a (vector 1 0 0))
	   (when (> (animated-button-time syringe-button) 75)
		 (set! syringe-button
		       (animated-button-modify-time 
			(animated-button-modify-state 
			 syringe-button "filling") 0))))))

  (set! vial2-button 
	(make-image-button 
	 300 540 "vial.png" "" 
	 (lambda (x) 
	   (set! vax-swarm-a (vax-in-syringe vax-swarm-a))
	   (vax-colour! vax-swarm-a (vector 1 1 0))
	   (when (> (animated-button-time syringe-button) 75)
		 (set! syringe-button
		       (animated-button-modify-time 
			(animated-button-modify-state 
			 syringe-button "filling") 0))))))
  
  (set! syringe-button 
	(make-animated-button 
	 (dbg (/ screen-width 2)) 540 "syringe.png" 
	 "plunger.png" 
	 (lambda (x) 
	   (when (and (eq? (animated-button-state syringe-button) "filling")
		      (> (animated-button-time syringe-button) 75))
		 (set! syringe-button
		       (animated-button-modify-time 
			(animated-button-modify-state 
			 syringe-button "emptying") 0))				 
		 (set! vax-swarm-a (vax-inject vax-swarm-a))))))
  
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (flot)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  (canvas-loaded?)
	  )
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

(every-frame (flot))
	 
