;; -*- mode: scheme; -*-

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas-widgets.jscm")
(load "scm/map/anim.jscm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; useful constants for tweaking

(define dollars-per-coin 8)
(define global-risk-multiplier 1)

(define transmission-low 4)
(define transmission-high 8)

(define high-pop-num 60)
(define low-pop-num 10)

(define max-budget 22) 

(define bednet-cost 1)
(define drug-cost 50)
(define badvax-cost 80)
(define goodvax-cost 1)

(define badvax-p-multiplier 0.3)

(define D 0.5) ;; duration of disease

(define num-people (+ (* high-pop-num 2) (* low-pop-num 2)))

(define start-amount 0)
(define start-budget (- max-budget start-amount))
(define total-budget start-budget)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; in coins
(define (make-budget vax drugs bednets)
  (list vax drugs bednets))
(define (empty-budget)
  (list 0 0 0))
(define (budget-vax b) (list-ref b 0))
(define (budget-drugs b) (list-ref b 1))
(define (budget-bednets b) (list-ref b 2))

(define (budget-add b id v)
  (list-replace b id (+ (list-ref b id) v)))

(define (budget-amount b id)
  (list-ref b id))

(define (budget-divide budget zones-active)
  (map (lambda (v) (/ v zones-active)) budget))

;; the model
(define (model-risk params transmission)
  (let ((vaccine (list-ref params 0))
	(drugs (list-ref params 1))
	(bednets (list-ref params 2))
	(mu 0.5)) ;; 1/host lifespan
    (* global-risk-multiplier
       (max 0 (* mu (- (* (- 1 vaccine) (- 1 drugs) D)
		       (/ 1 (* (- 1.000001 bednets) transmission))))))))
  
;; parameters go from 0-1
;; budget in dollars
;; higher cost, less you get
;; higher population, less effective
(define (budget->params b population good-vax)
  (list
   ;; over 1 makes no sense for the model 
   ;; (presume a person has no use for more than one bed net, vaccine etc)
   (min 1 (if good-vax
	      (/ (/ (* (budget-vax b) dollars-per-coin) goodvax-cost) population)
	      (* (/ (/ (* (budget-vax b) dollars-per-coin) badvax-cost) population) badvax-p-multiplier)))
   (min 1 (/ (/ (* (budget-drugs b) dollars-per-coin) drug-cost) population))
   (min 1 (/ (/ (* (budget-bednets b) dollars-per-coin) bednet-cost) population))))

;; zoning
(define volcanoes 0) ;; high pop/low risk
(define desert 1)    ;; low pop/low risk
(define lakes 2)     ;; high pop/high risk
(define forest 3)    ;; low pop/high risk

(define (zone-col->id col)
  (cond
   ((and (eq? (vx col) 255) (eq? (vy col) 0)   (eq? (vz col) 0)) volcanoes)
   ((and (eq? (vx col) 0)   (eq? (vy col) 255) (eq? (vz col) 0)) desert)
   ((and (eq? (vx col) 0)   (eq? (vy col) 0)   (eq? (vz col) 255)) lakes)
   (else forest)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define map-width 3840)
(define map-height 2160)

(define (read-map ctx x y) 
  (let ((t (ctx.getImageData x y 1 1)))
    t.data))

(define (generate-map-pos zone-id exclusion-ctx zones-ctx)
  (let ((p (vector (* (rndf) map-width) (* (rndf) map-height) 0)))
    (let ((d (read-map exclusion-ctx (vx p) (vy p)))
	  (z (read-map zones-ctx (vx p) (vy p))))
      (if (and (> (vx d) 127) (eq? (zone-col->id z) zone-id))
	  p (generate-map-pos zone-id exclusion-ctx zones-ctx)))))

(define (map->world pos)
    ;; pos is in map pixel space
    ;; so divide to normalise (0 - 1)
    (let ((map-aspect (/ map-width map-height))
	  (scr-aspect (/ screen-width screen-height))
	  (norm (vector (/ (vx pos) map-width)
			(/ (vy pos) map-height)
			0)))
      ;; convert to screen space pixels (0 - screen-width/height)
      (let ((screen (vector
		     (* (vx norm) screen-width)
		     ;; need to sort out y so it ends at the right 
		     ;; place - not screen-height
		     ;; as the aspect ratio is different
		     (* (vy norm) (/ screen-width map-aspect))
		     0)))	
	;; convert into ortho world coordinates (-20 to 20) - but account for half scale
	(vector
	 (* (/ (- (vx screen) (/ screen-width 2)) screen-width) (* 40 scr-aspect))
	 (* (/ (- (/ screen-height 2) (vy screen)) screen-height) 40) 
	 (* (vy norm) 0.1)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-person pos infected anim-state zone-id suscep root) 
  (list pos infected anim-state zone-id suscep root))
(define (person-pos p) (list-ref p 0))
(define (person-infected p) (list-ref p 1))
(define (person-anim-state p) (list-ref p 2))
(define (person-update-anim-state p v) (list-replace p 2 v))
(define (person-zone-id p) (list-ref p 3))
(define (person-suscep p) (list-ref p 4))
(define (person-root p) (list-ref p 5))

(define (hex->col r g b) (vector (/ r 255) (/ g 255) (/ b 255)))

(define skin-tones (list (hex->col 0x8d 0x55 0x24)
			 (hex->col 0xc6 0x86 0x42)
			 (hex->col 0xe0 0xac 0x69)
			 (hex->col 0xf1 0xc2 0x7d)
			 (hex->col 0xff 0xdb 0xac)))

(define (person-z p)
  (vz (mtransform (with-primitive (person-root p) (get-transform)) (vector 0 0 0))))

(define (build-person zone-id pos)
  (make-person
   pos
   #f
   (anim-state-init)
   zone-id
   (rndf)
   (with-state
    (shader-assign-compiled "person")
    (colour (choose skin-tones))
    (translate (map->world pos))
    (translate (vector 0 2 0))
    (scale (vector 10 10 1))
    (when (< (rndf) 0.5) (scale (vector -1 1 1)))
    (load-primitive "models/plane.obj"))))

(define (update-person p y)
  (let ((infected (> y (person-suscep p))))
    (let ((anim-state 
	   (anim-state-advance
	    (if infected 1 0)
	    (person-anim-state p)
	    anim-loops)))
      (when (eq? anim-state undefined)
	    (msg (person-anim-state p)))
      (with-primitive 
       (person-root p)
       (texture (load-texture 
       		 (anim-state-get-frame anim-state anim-loops))))
      (person-update-anim-state p anim-state))))
    
(define (update-people!)
  (let ((supervax (toggle-button-state supervax-toggle))
	(all-active (not (zones-selected?)))
	(budget (budget-divide budget (count-zones-active))))
    (let ((volcano-params (budget->params (if (or all-active zone-volcano-on) budget (empty-budget)) high-pop-num supervax))
	  (desert-params (budget->params (if (or all-active zone-desert-on) budget (empty-budget)) low-pop-num supervax))
	  (lakes-params (budget->params (if (or all-active zone-lakes-on) budget (empty-budget)) high-pop-num supervax))
	  (forest-params (budget->params (if (or all-active zone-forest-on) budget (empty-budget)) low-pop-num supervax)))
      (let ((risk
	     (list
	      (model-risk volcano-params transmission-low) ;; volcanoes
	      (model-risk desert-params transmission-low) ;; desert
	      (model-risk lakes-params transmission-high) ;; lakes
	      (model-risk forest-params transmission-high)))) ;; forest	    
	(set! people
	      (map
	       (lambda (p)
		 (update-person p (list-ref risk (person-zone-id p))))
	       people))))))

(define (build-population num zone-id exclusion-ctx zones-ctx)
  (let ((positions 
	 (build-list 
	  num (lambda (i) 
		(generate-map-pos zone-id exclusion-ctx zones-ctx)))))
    ;; depth sort for transparency optimisation...
    (positions.sort 
     (lambda (a b) 
       (cond ((< (vy a) (vy b)) -1)
	     ((> (vy a) (vy b)) 1)
	     (else 0))))
    (map 
     (lambda (pos) 
       (build-person zone-id pos))
     positions)))


(define (build-stack id x y name)
  (let ((stack (make-coin-stack (- x 25) y "coin.png" name start-amount)))
    (list 
     stack
     (make-image-button
      (+ x 30) (+ y 80) 
      "plus.png" ""
      (lambda (x)
	(when (> total-budget 0)
	      (set! total-budget (- total-budget 1))
	      (set! budget (budget-add budget id 1)) 
	      (set! total-stack 
		    (coin-stack-modify-count 
		     total-stack
		     (- (coin-stack-count total-stack) 1)))
	      (set! stack 
		    (coin-stack-modify-count 
		     stack 
		     (+ (coin-stack-count stack) 1)))
	      (update-people!))))
     (make-image-button
      (- x 30) (+ y 80)
      "minus.png" ""
      (lambda (x)
	(when (> (budget-amount budget id) 0)
	      (set! total-budget (+ total-budget 1))
	      (set! budget (budget-add budget id -1)) 
	      (set! total-stack 
		    (coin-stack-modify-count 
		     total-stack
		     (+ (coin-stack-count total-stack) 1)))
	      (set! stack 
		    (coin-stack-modify-count 
		     stack 
		     (- (coin-stack-count stack) 1))))
	(update-people!))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")
(shader-compile "person" (list "p" "n" "t" "c")
		"shaders/person.vert"
		"shaders/person.frag")
(shader-compile "tree" (list "p" "n" "t" "c")
		"shaders/tree.vert"
		"shaders/tree.frag")

(load-texture "map-exclusion.png")
(load-texture "map-zones.png")
(load-texture "char-start.png")
(load-texture "tree-1.png")
(load-texture "tree-2.png")
(load-texture "tree-3.png")
(load-texture "tree-4.png")
(load-texture "tree-5.png")
(load-texture "tree-6.png")
(load-texture "tree-7.png")

(load-mesh-cache "models/circlefan.obj")
(load-mesh-cache "models/plane.obj")
(anim-preload)

(load-images!
 (list
  "coin.png"
  "plus.png"
  "minus.png"
  "toggle.png"
  "tick.png"
  "zones-0001.png"
  "zones-0010.png"
  "zones-0011.png"
  "zones-0100.png"
  "zones-0101.png"
  "zones-0110.png"
  "zones-0111.png"
  "zones-1000.png"
  "zones-1001.png"
  "zones-1010.png"
  "zones-1011.png"
  "zones-1100.png"
  "zones-1101.png"
  "zones-1110.png"
  "zones-1111.png"
  "zones-1100.png"
  )
 (lambda ()
   0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define people '())
(define budget (make-budget start-amount start-amount start-amount))

(define (reset-game!)
  0)

(define vaccination 0.6)
(define drugs 0)
(define bednets 0)

(define (render-stack! s)
  (image-button-update (list-ref s 1) 0)
  (image-button-update (list-ref s 2) 0)  
  (coin-stack-render! (list-ref s 0))
  (image-button-render! (list-ref s 1))
  (image-button-render! (list-ref s 2)))

(define zone-volcano-on #f)
(define zone-lakes-on #f)
(define zone-desert-on #f)
(define zone-forest-on #f)

(define (zones-selected?)
  (or zone-volcano-on
      zone-lakes-on
      zone-desert-on 
      zone-forest-on))

(define (all-zones-selected?)
  (and zone-volcano-on
       zone-lakes-on
       zone-desert-on 
       zone-forest-on))

(define (count-zones-active)
  (if (and (not zone-volcano-on)
	   (not zone-lakes-on)
	   (not zone-desert-on) 
	   (not zone-forest-on))
      4
      (+ (if zone-volcano-on 1 0)
	 (if zone-lakes-on 1 0)
	 (if zone-desert-on 1 0)
	 (if zone-forest-on 1 0))))

(define (zone-image)
  (string-append "zones-" 
		 (if zone-forest-on "0" "1")
		 (if zone-lakes-on "0" "1")
		 (if zone-desert-on "0" "1")
		 (if zone-volcano-on "0" "1")  
		 ".png"))

(define (render-canvas)
  (when (and (zones-selected?) (not (all-zones-selected?)))
	(set! ctx.globalAlpha 0.6)
	(ctx.drawImage (find-image (zone-image) image-lib) 0 0)
	(set! ctx.globalAlpha 1))

  (render-stack! vax-stack)
  (render-stack! drugs-stack)
  (render-stack! bednets-stack)
  (coin-stack-render! total-stack)
  (set! supervax-toggle (toggle-button-update supervax-toggle))
  (toggle-button-render! supervax-toggle)

  ;;(rect-button-render! volcano-button)
  ;;(rect-button-render! desert-button)
  ;;(rect-button-render! forest-button)
  ;;(rect-button-render! lakes-button)

  (rect-button-update volcano-button)
  (rect-button-update desert-button)
  (rect-button-update forest-button)
  (rect-button-update lakes-button)

    
  )

(define people-frame-time 0)

(define (render-game)
  (canvas-update-time)
  ;;(resize-glcanvas webgl-canvas)
  ;;(resize-canvas canvas)
  
  (ctx.clearRect 0 0 screen-width screen-height)	  
  (render-canvas)  
  (update-people!))

(define init #f)
(define exclusion-canvas 0)
(define exclusion-ctx 0)
(define zones-canvas 0)
(define zones-ctx 0)

(define (run-init)
  (ortho 20)
  (size-glcanvas webgl-canvas screen-width screen-height)   
  ;;(resize-glcanvas webgl-canvas)
  (canvas-setup)
  ;;(resize-canvas canvas)
  (set-framerate-divide! 3)
  
  (set! total-stack (make-coin-stack 50 (- screen-height 120) "coin.png" "Budget" start-budget))
  (set! supervax-toggle (make-toggle-button 150 (- screen-height 40) "toggle.png" "tick.png" "Max Vax" #f))
  (set! vax-stack (build-stack 0 250 (- screen-height 120) "Vaccination"))
  (set! drugs-stack (build-stack 1 400 (- screen-height 120) "Drugs"))
  (set! bednets-stack (build-stack 2 550 (- screen-height 120) "Bednets"))

  (set! volcano-button 
	(make-rect-button 
	 350 20 650 450 
	 (lambda (c) 
	   (set! zone-volcano-on (not zone-volcano-on)) c)))
  (set! desert-button 
	(make-rect-button 
	 1000 20 650 450 
	 (lambda (c) 
	   (set! zone-desert-on (not zone-desert-on)) c)))
  (set! forest-button 
	(make-rect-button 
	 350 470 650 450 
	 (lambda (c) 
	   (set! zone-forest-on (not zone-forest-on)) c)))
  (set! lakes-button 
	(make-rect-button 
	 1000 470 650 450 
	 (lambda (c) 
	   (set! zone-lakes-on (not zone-lakes-on)) c)))
  
  (with-state
   (translate (map->world (vector 900 900 0)))
   (translate (vector 0 3 0))
   (scale (vector 12 16 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-1.png"))
   (load-primitive "models/plane.obj"))

  (with-state
   (translate (map->world (vector 1100 1000 0)))
   (translate (vector 0 3 0))
   (scale (vector 16 16 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-4.png"))
   (load-primitive "models/plane.obj"))

  (with-state
   (translate (map->world (vector 1700 1000 0)))
   (translate (vector 0 3 0))
   (scale (vector 16 16 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-6.png"))
   (load-primitive "models/plane.obj"))

  (with-state
   (translate (map->world (vector 1850 1100 0)))
   (translate (vector 0 3 0))
   (scale (vector 16 21 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-5.png"))
   (load-primitive "models/plane.obj"))
	
  (with-state
   (translate (map->world (vector 1950 1200 0)))
   (translate (vector 0 3 0))
   (scale (vector -14 14 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-6.png"))
   (load-primitive "models/plane.obj"))
	
  (with-state
   (translate (map->world (vector 2000 1400 0)))
   (translate (vector 0 3 0))
   (scale (vector -16 16 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-4.png"))
   (load-primitive "models/plane.obj"))

  (with-state
   (translate (map->world (vector 1100 1500 0)))
   (translate (vector 0 3 0))
   (scale (vector -12 16 1))
   (shader-assign-compiled "tree")
   (texture (load-texture "tree-1.png"))
   (load-primitive "models/plane.obj"))


  ;; draw the map into a context so we can read pixels
  ;; out of it...
  ;; need to load it from static data due to cross origin rules
  (load-resource-img 
   "textures/map-exclusion.png" 
   (lambda (img)
     (set! exclusion-canvas (document.createElement "canvas"))
     (set! exclusion-canvas.width img.width)
     (set! exclusion-canvas.height img.height)
     (set! exclusion-ctx (exclusion-canvas.getContext "2d")) 
     (exclusion-ctx.drawImage img 0 0)

     (load-resource-img 
      "textures/map-zones.png" 
      (lambda (img)
	(set! zones-canvas (document.createElement "canvas"))
	(set! zones-canvas.width img.width)
	(set! zones-canvas.height img.height)
	(set! zones-ctx (zones-canvas.getContext "2d")) 
	(zones-ctx.drawImage img 0 0)
	(set! people 
	      (append
	       (build-population high-pop-num volcanoes exclusion-ctx zones-ctx)
	       (build-population low-pop-num desert exclusion-ctx zones-ctx)
	       (build-population high-pop-num lakes exclusion-ctx zones-ctx)
	       (build-population low-pop-num forest exclusion-ctx zones-ctx)))
	(update-people!)))))
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (start)
  (when  (and
	  (not init)
;;	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  (canvas-loaded?)
	  )

	 (msg "starting up...")
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

;;(resize-canvas canvas)
(set! ctx.font "20pt Amatic")
(ctx.fillText "Loading..." 100 100)

(set! screen-width 1920)
(set! screen-height 1080)
(canvas-init-defaults)
(set! zone-canvas (document.createElement "canvas"))
(set! zone-canvas.width screen-width)
(set! zone-canvas.height screen-height)
(set! zone-ctx (zone-canvas.getContext "2d")) 

(set! window.onresize (lambda () 0))

(every-frame (start))
