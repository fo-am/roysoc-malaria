;; -*- mode: scheme; -*-
;; Royal Soc Malaria Copyright (C) 2018 FoAM Kernow

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")
(load "scm/map/anim.jscm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define D 0.5) ;; duration
(define risk-low 4)
(define risk-high 8)

(define (model-risk vaccine drugs bednets transmission)
  (let ((mu 0.5)) ;; 1/lifespan
    (max 0 (* mu (- (* (- 1 vaccine) (- 1 drugs) D)
                    (/ 1 (* (- 1.000001 bednets) transmission)))))))

(define high-pop-num 300)
(define low-pop-num 30)
(define num-people (+ (* high-pop-num 2) (* low-pop-num 2)))
(define max-budget 30) ;; in dollars

(define start-amount 0)
(define start-budget (- max-budget start-amount))
(define total-budget start-budget)

(define bednet-cost 0.2)
(define drug-cost 50)
(define badvax-cost 80)
(define goodvax-cost 1)

;; budget in chunks of value = coins
(define (make-budget vax drugs bednets)
  (list vax drugs bednets))
(define (budget-vax b) (list-ref b 0))
(define (budget-drugs b) (list-ref b 1))
(define (budget-bednets b) (list-ref b 2))

(define (budget-add b id v)
  (list-replace b id (+ (list-ref b id) v)))

(define (budget-amount b id)
  (list-ref b id))

;; parameters go from 0-1
;; budget in dollars
;; higher cost, less you get
;; higher population, less effective
(define (budget->params b population good-vax)
  (list
   (min 1 (if good-vax
	      (/ (/ (budget-vax b) goodvax-cost) population)
	      (* (/ (/ (budget-vax b) badvax-cost) population) 0.3)))
   (min 1 (/ (/ (budget-drugs b) drug-cost) population))
   (min 1 (/ (/ (budget-bednets b) bednet-cost) population))))

;; zoning

(define highpop-lowrisk 0)  ;; volcanoes
(define lowpop-lowrisk 1)   ;; desert
(define highpop-highrisk 2) ;; lakes
(define lowpop-highrisk 3)  ;; forests

(define (zone-col->id col)
  (msg col)
  (cond
   ((and (eq? (vx col) 255) (eq? (vy col) 0)   (eq? (vz col) 0)) 0)
   ((and (eq? (vx col) 0)   (eq? (vy col) 255) (eq? (vz col) 0)) 1)
   ((and (eq? (vx col) 0)   (eq? (vy col) 0)   (eq? (vz col) 255)) 2)
   (else 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define map-width 3840)
(define map-height 2160)

(define (read-map ctx x y) 
  (let ((t (ctx.getImageData x (- map-height y) 1 1)))
    t.data))

(define (generate-map-pos zone-id exclusion-ctx zones-ctx)
  (let ((p (vector (* (rndf) map-width) (* (rndf) map-height) 0)))
    (let ((d (read-map exclusion-ctx (vx p) (vy p)))
	  (z (read-map zones-ctx (vx p) (vy p))))
      (if (and (> (vx d) 127) (eq? (zone-col->id z) zone-id))
	  p (generate-map-pos zone-id exclusion-ctx zones-ctx)))))

(define (make-person pos infected anim-state zone-id suscep root) 
  (list pos infected anim-state zone-id suscep root))
(define (person-pos p) (list-ref p 0))
(define (person-infected p) (list-ref p 1))
(define (person-anim-state p) (list-ref p 2))
(define (person-update-anim-state p v) (list-replace p 2 v))
(define (person-zone-id p) (list-ref p 3))
(define (person-suscep p) (list-ref p 4))
(define (person-root p) (list-ref p 5))

(define (build-person zone-id pos)
  (make-person
   pos
   #f
   (anim-state-init)
   zone-id
   (rndf)
   (with-state
    (texture (load-texture "char-start.png"))
    (shader-assign-compiled "person")
    ;; pos is in map pixel space
    ;; so divide to normalise
    (let ((norm (vector (- (/ (vx pos) map-width) 0.5)
			(- (/ (vy pos) map-height) 0.5)
			0)))
      (translate (vadd
		  (vector (* (vx norm) (/ screen-width screen-height) 30)
			  (* (vy norm) (/ screen-width screen-height) 17) 
			  0)
		  (vector 0 0 (* (vy norm) -0.01)))))
    (scale (vector 6 6 1))
    (when (< (rndf) 0.5) (scale -1 1 1))
    (load-primitive "models/plane.obj")
    )))

(define (update-person p y)
  (let ((infected (> y (person-suscep p))))
    (let ((anim-state 
	   (anim-state-advance
	    (person-anim-state p)
	    (if infected loops-infected loops-uninfected))))
      (with-primitive 
       (person-root p)
       (texture (load-texture 
		 (anim-state-get-frame 
		  anim-state
		  (if infected
		      loops-infected loops-uninfected)))))
      (person-update-anim-state p anim-state))))
    
(define (update-people!)
  (let ((low-pop-params (budget->params budget low-pop-num #t))
	(high-pop-params (budget->params budget high-pop-num #t)))
    (let ((risk
	   (list
	    ;; volcanoes: high pop, low risk
	    (model-risk (list-ref high-pop-params 0)
			(list-ref high-pop-params 1)
			(list-ref high-pop-params 2)
			risk-low)
	    ;; desert: low pop, low risk
	    (model-risk (list-ref low-pop-params 0)
			(list-ref low-pop-params 1)
			(list-ref low-pop-params 2)
			risk-low)
	    ;; lakes: high pop, high risk
	    (model-risk (list-ref high-pop-params 0)
			(list-ref high-pop-params 1)
			(list-ref high-pop-params 2)
			risk-high)
	    ;; forests: low pop, high risk
	    (model-risk (list-ref low-pop-params 0)
			(list-ref low-pop-params 1)
			(list-ref low-pop-params 2)
			risk-high))))
	    

    (set! people
	  (map
	   (lambda (p)
	     (update-person p (list-ref risk (person-zone-id p))))
	   people)))))

(define (build-stack id x y name)
  (let ((stack (make-coin-stack (- x 25) y "coin.png" name start-amount)))
    (list 
     stack
     (make-image-button
      (+ x 30) (+ y 80) 
      "plus.png" ""
      (lambda (x)
	(when (> total-budget 0)
	      (set! total-budget (- total-budget 1))
	      (set! budget (budget-add budget id 1)) 
	      (set! total-stack 
		    (coin-stack-modify-count 
		     total-stack
		     (- (coin-stack-count total-stack) 1)))
	      (set! stack 
		    (coin-stack-modify-count 
		     stack 
		     (+ (coin-stack-count stack) 1)))
	      (update-people!))))
     (make-image-button
      (- x 30) (+ y 80)
      "minus.png" ""
      (lambda (x)
	(when (> (budget-amount budget id) 0)
	      (set! total-budget (+ total-budget 1))
	      (set! budget (budget-add budget id -1)) 
	      (set! total-stack 
		    (coin-stack-modify-count 
		     total-stack
		     (+ (coin-stack-count total-stack) 1)))
	      (set! stack 
		    (coin-stack-modify-count 
		     stack 
		     (- (coin-stack-count stack) 1))))
	(update-people!))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")
(shader-compile "person" (list "p" "n" "t" "c")
		"shaders/person.vert"
		"shaders/person.frag")

(load-texture "map-exclusion.png")
(load-texture "map-zones.png")
(load-texture "char-start.png")
(load-texture "char-red.png")
(load-mesh-cache "models/circlefan.obj")
(load-mesh-cache "models/plane.obj")
(anim-preload)

(load-images!
 (list
  "coin.png"
  "plus.png"
  "minus.png"
  )
 (lambda ()
   0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define people '())
(define budget (make-budget start-amount start-amount start-amount))

(define (reset-game!)
  0)

(define vaccination 0.6)
(define drugs 0)
(define bednets 0)

(define (render-stack! s)
  (image-button-update (list-ref s 1) 0)
  (image-button-update (list-ref s 2) 0)  
  (coin-stack-render! (list-ref s 0))
  (image-button-render! (list-ref s 1))
  (image-button-render! (list-ref s 2)))

(define (render-canvas)
  (render-stack! vax-stack)
  (render-stack! drugs-stack)
  (render-stack! bednets-stack)
  (coin-stack-render! total-stack))

(define people-frame-time 0)

(define (render-game)
  (canvas-update-time)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  
  (ctx.clearRect 0 0 screen-width screen-height)	  
  (render-canvas)  
  (update-people!))

(define init #f)
(define exclusion-canvas 0)
(define exclusion-ctx 0)
(define zones-canvas 0)
(define zones-ctx 0)

(define (run-init)
  (resize-glcanvas webgl-canvas)
  (canvas-setup)
  (resize-canvas canvas)
  
  (set! vax-stack (build-stack 0 300 (- screen-height 120) "Good Vaccination"))
  (set! drugs-stack (build-stack 1 450 (- screen-height 120) "Drugs"))
  (set! bednets-stack (build-stack 2 600 (- screen-height 120) "Bednets"))
  (set! total-stack (make-coin-stack 700 (- screen-height 120) "coin.png" "Budget" start-budget))
	
  ;; draw the map into a context so we can read pixels
  ;; out of it...
  ;; need to load it from static data due to cross origin rules
  (load-resource-img 
   "textures/map-exclusion.png" 
   (lambda (img)
     (set! exclusion-canvas (document.createElement "canvas"))
     (set! exclusion-canvas.width img.width)
     (set! exclusion-canvas.height img.height)
     (set! exclusion-ctx (exclusion-canvas.getContext "2d")) 
     (exclusion-ctx.drawImage img 0 0)

     (set! ctx.globalAlpha 0.4)
     (ctx.drawImage exclusion-canvas 0 0)
     (set! ctx.globalAlpha 1)

     (load-resource-img 
      "textures/map-zones.png" 
      (lambda (img)
	(set! zones-canvas (document.createElement "canvas"))
	(set! zones-canvas.width img.width)
	(set! zones-canvas.height img.height)
	(set! zones-ctx (zones-canvas.getContext "2d")) 
	(zones-ctx.drawImage img 0 0)
	(set! people 
	      (append
	       (build-list 
		high-pop-num
		(lambda (i) 
		  (build-person 0 (generate-map-pos 0 exclusion-ctx zones-ctx))))
	       (build-list 
		low-pop-num
		(lambda (i) 
		  (build-person 1 (generate-map-pos 1 exclusion-ctx zones-ctx))))
	       (build-list 
		high-pop-num
		(lambda (i) 
		  (build-person 2 (generate-map-pos 2 exclusion-ctx zones-ctx))))
	       (build-list 
		low-pop-num
		(lambda (i) 
		  (build-person 3 (generate-map-pos 3 exclusion-ctx zones-ctx))))))
	(update-people!)))))
  
  
;;  (set-camera-transform (mtranslate (camera-transform) (vector 0 5 0)))
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (flot)
  (when  (and
	  (not init)
;;	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  (canvas-loaded?)
	  )
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

(resize-canvas canvas)
(set! ctx.font "20pt Amatic")
(ctx.fillText "Loading..." 100 100)

(every-frame (flot))
	 
