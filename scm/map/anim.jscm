;; -*- mode: scheme; -*-

(define anim-loops
  (list
   (list ;; uninfected
    (list "start black.png")
    (list "bend knees black.png")
    (list "jump 1 black.png"
	  "jump 2 black.png"
	  "jump 3 black.png"
	  "jump 4 black.png"
	  "jump 5 black.png"
	  "jump 6 black.png")
    (list "pat head bend knees black.png")
    (list "scratch head 1 black.png"
	  "scratch head 2 black.png"
	  "scratch head 3 black.png")
    (list "tap foot black.png")
    (list "walk 1 black.png"
	  "walk 2 black.png"
	  "walk 3 black.png"
	  "walk 4 black.png"
	  "walk 5 black.png"
	  "walk 6 black.png"
	  "walk 7 black.png"
	  "walk 8 black.png"
	  "walk 9 black.png"
	  "walk 10 black.png"
	  "walk 11 black.png"
	  "walk 12 black.png"
	  "walk 13 black.png"
	  "walk 14 black.png"
	  "walk 15 black.png"
	  "walk 16 black.png"
	  "walk 17 black.png"
	  "walk 18 black.png"
	  "walk 19 black.png"
	  "walk 20 black.png"
	  "walk 21 black.png"
	  "walk 22 black.png"
	  "walk 23 black.png"
	  "walk 24 black.png"
	  "walk 25 black.png"
	  "walk 26 black.png"
	  "walk 27 black.png")
    (list "yogi 1 black.png"
	  "yogi 2 black.png"))
   (list ;; infected
    (list "start red.png")
    (list "bend 1 red.png"
	  "bend 2 red.png"
	  "bend 3 red.png"
	  "bend 4 red.png"
	  "bend 5 red.png"
	  "bend 6 red.png")
    (list "bend knees red.png")
    (list "pat head 1 red.png"
	  "pat head 2 red.png"
	  "pat head 3 red.png"
	  "pat head 3 red.png"
	  "pat head 3 red.png"
	  "pat head 3 red.png"
	  "pat head 3 red.png"
	  "pat head 3 red.png"
	  "pat head 4 red.png"
	  "pat head 5 red.png"))))

(define anim-path "frames/")

(define (anim-preload)
  (for-each
   (lambda (i)
     (for-each
      (lambda (l)
	(for-each
	 (lambda (f)
	   (load-texture (string-append anim-path f)))
	 l))
      i))
   anim-loops))
       
(define (make-anim-state infected loop frame time) 
  (list infected loop frame time))
(define (anim-state-infected s) (list-ref s 0))
(define (anim-state-loop s) (list-ref s 1))
(define (anim-state-frame s) (list-ref s 2))
(define (anim-state-time s) (list-ref s 3))

(define (anim-state-init) (make-anim-state 0 0 0 (rndf)))

(define anim-frame-rate 8)
(define anim-frame-time (/ 1 anim-frame-rate))
(define anim-new-loop-probability 0.01)
(define anim-repeat-loop-probability 0.5)

;; 0 or 1 for infected state
(define (anim-state-advance infected a loops)
  (if (< (anim-state-time a) anim-frame-time)
      (make-anim-state
       (anim-state-infected a)
       (anim-state-loop a) 
       (anim-state-frame a) 
       (+ (anim-state-time a) canvas-delta))
      (let ((current-loops (list-ref loops (anim-state-infected a))))
	(cond
	 ((zero? (anim-state-loop a)) ;; we are in the standing pose...
	  (cond
	   ((or (not (eq? infected (anim-state-infected a))) 
		(< (rndf) anim-new-loop-probability)) ;; trigger new loop
	    (make-anim-state 
	     infected (random (length (list-ref loops infected))) 0 0))
	   (else 
	    (make-anim-state
	     (anim-state-infected a)
	     (anim-state-loop a) 
	     (anim-state-frame a) 
	     0))))
	 ;; have we run out of frames?
	 ((>= (anim-state-frame a) 
	      (- (length (list-ref current-loops (anim-state-loop a))) 1))
	  (cond
	   ;; repeat loop again, unless infected state has changed
	   ((and (eq? infected (anim-state-infected a)) 
		 (< (rndf) anim-repeat-loop-probability)) 
	    (make-anim-state 
	     (anim-state-infected a) (anim-state-loop a) 0 0))
	   (else 
	    (make-anim-state infected 0 0 0)))) ;; back to start pose
	 (else
	  (make-anim-state 
	   (anim-state-infected a) 
	   (anim-state-loop a) 
	   (+ (anim-state-frame a) 1) 0))))))

(define (anim-state-get-frame a loops)
  (let ((loops (list-ref loops (anim-state-infected a))))
    (when (eq? loops undefined) (msg a))
    (let ((loop (list-ref loops (anim-state-loop a))))
      (when (eq? loop undefined) (msg a))
      (let ((frame (list-ref loop (anim-state-frame a))))
	(when (eq? frame undefined) (msg a))
	(string-append
	 anim-path
	 (cond 
	  ((eq? frame undefined)
	   (msg a)
	   (car (car (car loops))))
	  (else frame)))))))

