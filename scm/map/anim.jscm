;; -*- mode: scheme; -*-

(define loops-infected
  (list
   (list "start red.png")
   (list "bend 1 red.png"
	 "bend 2 red.png"
	 "bend 3 red.png"
	 "bend 4 red.png"
	 "bend 5 red.png"
	 "bend 6 red.png")
   (list "bend knees red.png")
   (list "pat head 1 red.png"
	 "pat head 2 red.png"
	 "pat head 3 red.png"
	 "pat head 4 red.png"
	 "pat head 5 red.png")
   (list "yogi 1 red.png"
	 "yogi 2 red.png")))
  
(define loops-uninfected
  (list
   (list "start black.png")
   (list "bend knees black.png")
   (list "jump 1 black.png"
	 "jump 2 black.png"
	 "jump 3 black.png"
	 "jump 4 black.png"
	 "jump 5 black.png"
	 "jump 6 black.png")
   (list "pat head bend knees black.png")
   (list "scratch head 1 black.png"
	 "scratch head 2 black.png"
	 "scratch head 3 black.png")
   (list "tap foot black.png")
   (list "walk 1 black.png"
	 "walk 2 black.png"
	 "walk 3 black.png"
	 "walk 4 black.png"
	 "walk 5 black.png"
	 "walk 6 black.png"
	 "walk 7 black.png"
	 "walk 8 black.png"
	 "walk 9 black.png"
	 "walk 10 black.png"
	 "walk 11 black.png"
	 "walk 12 black.png"
	 "walk 13 black.png"
	 "walk 14 black.png"
	 "walk 15 black.png"
	 "walk 16 black.png"
	 "walk 17 black.png"
	 "walk 18 black.png"
	 "walk 19 black.png"
	 "walk 20 black.png"
	 "walk 21 black.png"
	 "walk 22 black.png"
	 "walk 23 black.png"
	 "walk 24 black.png"
	 "walk 25 black.png"
	 "walk 26 black.png"
	 "walk 27 black.png")
   (list "yogi 1 black.png"
	 "yogi 2 black.png")))

(define anim-path "frames/")

(define (anim-preload)
  (for-each
   (lambda (l)
     (for-each
      (lambda (f)
	(load-texture (string-append anim-path f)))
      l))
   loops-infected)
  (for-each
   (lambda (l)
     (for-each
      (lambda (f)
	(load-texture (string-append anim-path f)))
      l))
   loops-uninfected))
       
(define (make-anim-state loop frame time) (list loop frame time))
(define (anim-state-loop s) (list-ref s 0))
(define (anim-state-frame s) (list-ref s 1))
(define (anim-state-time s) (list-ref s 2))

(define (anim-state-init) (make-anim-state 0 0 (rndf)))

(define anim-frame-rate 5)
(define anim-frame-time (/ 1 anim-frame-rate))

(define (anim-state-advance a loops)
  (if (< (anim-state-time a) anim-frame-time)
      (make-anim-state
       (anim-state-loop a) (anim-state-frame a) 
       (+ (anim-state-time a) canvas-delta))
      (cond
       ((zero? (anim-state-loop a)) ;; we are in the standing pose...
	(cond
	 ((< (rndf) 0.001) ;; trigger new loop
	  (make-anim-state (random (length loops)) 0 0))
	 (else a)))
       ;; have we run out of frames?
       ((>= (anim-state-frame a) (- (length (list-ref loops (anim-state-loop a))) 1))
	(cond
	 ((< (rndf) 0.5) ;; repeat loop again
	  (make-anim-state (anim-state-loop a) 0 0))
	 (else (make-anim-state 0 0 0)))) ;; back to start pose
       (else
	(make-anim-state (anim-state-loop a) (+ (anim-state-frame a) 1) 0)))))

(define (anim-state-get-frame a loops)
  (string-append
   anim-path
   (list-ref 
    (list-ref loops (anim-state-loop a))
    (anim-state-frame a))))
