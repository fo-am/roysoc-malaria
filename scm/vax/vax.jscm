;; -*- mode: scheme; -*-
;; Royal Soc Malaria Copyright (C) 2018 FoAM Kernow

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")

(define receptor-create-distance 0.5)
(define receptor-types (list "A" "B" "C" "D" "E" "F"))
(define magic-fixed #f)

(define (hex->col r g b) (vector (/ r 255) (/ g 255) (/ b 255)))

(define receptor-a-col (hex->col 0xd2 0xe0 0x49))
(define receptor-b-col (hex->col 0x44 0x45 0x45))
(define receptor-c-col (hex->col 0x7b 0xe0 0xad))
(define receptor-d-col (hex->col 0x00 0x81 0xaf))
(define receptor-e-col (hex->col 0xf6 0x10 0x67))
;;(define receptor-f-col (hex->col 0xf7 0x92 0x56))
(define receptor-f-col (hex->col 0xf7 0xd0 0x8a))

(define (type->col type)
  (cond 
   ((eq? type "A") receptor-a-col)
   ((eq? type "B") receptor-b-col)
   ((eq? type "C") receptor-c-col)
   ((eq? type "D") receptor-d-col)
   ((eq? type "E") receptor-e-col)
   (else receptor-f-col)))

(define parasite-create-distance 10)
(define parasite-num-receptors 8)

;; 85 6d 9b b6

(define parasite-col (vector (/ 0x85 255)
			     (/ 0x6d 255)
			     (/ 0x9b 255)))
(define parasite-repel 0.03)
(define parasite-cluster -0.002)
(define parasite-inertia 0.90)
(define parasite-max-age 100)
(define parasite-growth-speed 0.3)
(define parasite-death-speed 2)
(define parasite-max-pop 60)
(define parasite-spawn-distance 1)
(define parasite-spawn-prob 0.00) ;; 0.002
(define parasite-max-velocity 0.05)
(define parasite-swarm-centre (vector 0 5 0))

(define parasites-start-num 10)

(define vax-swarm-size 200)
(define vax-inject-amount 100)
(define vax-inject-fill-prob 1)
(define vax-inertia 0.05) ;; 0.05
(define vax-speed -0.5)
(define vax-collide-distance 1)
(define vax-rot-speed 13)
;;(define vax-dissolve-prob 0.005)
(define vax-dissolve-prob 0.04)

(define explosion-max-age 2)
(define explosion-speed 0.05)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (screen->world screen)
  ;; convert to screen space pixels (0 - screen-width/height)
  (let ((world (vector
		(- (vx screen) (/ screen-width 2))
		(- (/ screen-height 2) (vy screen)) 
		0)))    
    (vmul world 0.045) ;; special uniform scale...
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; building an randomised array of receptor types

;; careful - no endless loop check
(define (choose-not l e)
  (let ((t (choose l)))
    (if (not (list-contains? e t))
        t
        (choose-not l e))))

(define (receptor-array magic size)
  (let ((primary (choose receptor-types)))
    (let ((secondary (choose-not receptor-types (list magic primary))))
      (shuffle
       (append
	(list magic)
	(list (choose (list secondary magic primary)) secondary)
	(build-list (- size 3)
		    (lambda (_)
		      primary)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; posisiton is relative to parasite
(define (make-receptor type pos parasite-id) 
  (list type pos parasite-id))

;; don't need root, just parent and forget...
(define (receptor-type r) (list-ref r 0))
(define (receptor-pos r) (list-ref r 1))
(define (receptor-parasite-id r) (list-ref r 2))

(define (build-receptor pos type pid)
  ;; parenting and forgetting - will be deleted when
  ;; parent is destroyed
  (with-state
   (colour (type->col type))
   (parent pid)
   (translate pos)
   (texture (load-texture "recep-square.png"))
   (shader-assign-compiled "receptor")   
   (load-primitive "models/circletiny.obj"))
  (make-receptor type pos pid))

(define (receptors-clone rs pid)
  (build-receptors 
   (length rs) 
   (shuffle (map (lambda (r) (receptor-type r)) rs)) pid))

(define squash 0.4)
  
(define (init-receptors n magic pid)
  (build-receptors n (receptor-array magic n) pid))

(define (build-receptors n array pid)
  (let ((start (* (rndf) 2 3.141)))
    (index-map
     (lambda (i s)
       (build-receptor 
	(vmul (vector (sin (+ start (* (/ (+ i 1) n) 2 3.141))) 
		      (* (cos (+ start (* (/ (+ i 1) n) 2 3.141))) squash)
		      0.2)
	      receptor-create-distance)
	s pid))
     array)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-parasite id pos vel age receptors state root)
	(list id pos vel age receptors state root))

(define (parasite-id p) (list-ref p 0))
(define (parasite-pos p) (list-ref p 1))
(define (parasite-vel p) (list-ref p 2))
(define (parasite-age p) (list-ref p 3))
(define (parasite-receptors p) (list-ref p 4))
(define (parasite-state p) (list-ref p 5))
(define (parasite-modify-state p v) (list-replace p 5 v))
(define (parasite-root p) (list-ref p 6))

(define (parasite-prim)
  (with-state
   (shader-assign-compiled "parasite")
   (colour parasite-col)
   (texture (load-texture "noise.png"))
   (translate (vector 1000 0 0))
   (load-primitive "models/malaria-low.obj")))

;; lazily reuse primitive ids as parasite ids
(define (build-parasite pos magic)
  (let ((pid (parasite-prim)))
    (make-parasite
     pid pos 
     (vector 0 0 0) 
     (* (rndf) 100)
     (init-receptors parasite-num-receptors magic pid)
     "alive"
     pid)))

(define (parasite-spawn pos parent-receptors)
  (let ((pid (parasite-prim)))
    (make-parasite
     pid pos 
     (vector 0 0 0) 
     (random 10)
     (init-receptors parasite-num-receptors current-magic pid)
     ;;(shuffle (receptors-clone parent-receptors pid))
     "alive"
     pid)))

(define (parasite-closest parasite p)
  (let ((closest 999999))
    (foldl
     (lambda (other r)
       (if (not (eq? (parasite-id other) 
		     (parasite-id parasite)))
	   (let ((dist (vdist-squared (parasite-pos parasite)
				      (parasite-pos other))))
	     (if (< dist closest)
		 (begin
		   (set! closest dist)
		   (parasite-pos other))
		 r))
	   r))
     (vector 0 0 0) p)))

(define (parasite-swarm vel pos closest)
  (let ((diff (vsub pos closest)))
    (let ((vel (vadd
		(vmul vel parasite-inertia)
		(vmul
		 (vadd 
		  (vmul (vmul (vnormalise diff) parasite-repel) 
			(Math.pow (/ 1 (vmag diff)) 1.5))
		  (vmul (vnormalise (vsub pos parasite-swarm-centre)) parasite-cluster))
		 (/ 1 parasite-inertia)))))
      (if (> (vmag vel) parasite-max-velocity)
	  (vmul (vnormalise vel) parasite-max-velocity)
	  vel))))

(define (update-parasite p parasites)
  (let ((new-vel 
	 (parasite-swarm 
	  (parasite-vel p)
	  (parasite-pos p)
	  (parasite-closest p parasites))
	 (parasite-vel p)))
    (with-primitive
     (parasite-root p)
     (cond 
      ((eq? (parasite-state p) "alive")
       (identity)
       (translate (parasite-pos p))
       (let ((sc (+ 2 (* (/ (parasite-age p) parasite-max-age) 4))))
	 (scale (vector sc sc 0.01))))
      (else (scale (vector 0.9 0.9 0.9)))))
    (make-parasite
     (parasite-id p)
     (vadd (parasite-pos p) new-vel)
     new-vel
     (if (eq? (parasite-state p) "alive")
	 (+ (parasite-age p) parasite-growth-speed) 
	 (- (parasite-age p) parasite-death-speed))
     (parasite-receptors p)
     (parasite-state p)
     (parasite-root p))))

(define (parasites-spawn parasites)
  (foldl
   (lambda (p r)
     (cond 
      ((or (< (rndf) parasite-spawn-prob)
	   (> (parasite-age p) parasite-max-age))
       (destroy (parasite-root p))
       (if (< (length parasites) parasite-max-pop)
	   (let ((new-pos (vector 1 0 0)))
	     (append
	      (list (parasite-spawn 
		     (vadd (parasite-pos p) 
			   (vmul new-pos parasite-spawn-distance))
		     (parasite-receptors p))
		    ;(parasite-spawn 
		    ; (parasite-pos p)    
		    ; (parasite-receptors p))
		    (parasite-spawn 
		     (vadd (parasite-pos p) 
			   (vmul new-pos (- parasite-spawn-distance)))
		     (parasite-receptors p)))
	      r))
	   r))
      (else (cons p r))))
   '()
   parasites))

(define (parasites-death parasites destroyed)
  (map
   (lambda (p)
     (if (list-contains? destroyed (parasite-id p))
	 (parasite-modify-state p "dead") p))
   parasites))

;; (define (parasites-destroy parasites destroyed)
;;   (foldl
;;    (lambda (p r)
;;      (cond 
;;       ((list-contains? destroyed (parasite-id p))
;;        (destroy (parasite-root p))
;;        r)
;;       (else (cons p r))))
;;    '()
;;    parasites))

(define (parasites-destroy parasites)
  (foldl
   (lambda (p r)
     (cond 
      ((and (eq? (parasite-state p) "dead")
	    (< (parasite-age p) 0))
       (destroy (parasite-root p))
       r)
      (else (cons p r))))
   '()
   parasites))

(define (parasites-destroy-all parasites)
  (for-each
   (lambda (p)
     (destroy (parasite-root p)))
   parasites))

(define (trnc num)
  (/ (floor (* num 100)) 100))

(define (update-parasites parasites)
  (cond 
   ((zero? (length parasites)) ;; win
    (cond 
     ((> vaccinations 1)
      (set! vaccination-run 0)
      (fire-popup! "bad" (list (+ "CURED: " vaccinations " VACCINATIONS USED")
			       "CAN YOU DO BETTER?")))
     (else
      (set! vaccination-run (+ vaccination-run 1))
      (cond 
       ((> vaccination-run 2)
	(set! vaccination-run 0)
	(fire-popup! "bad" (list "CURED IN ONE: THREE IN A ROW"
				 "YOU ARE A PRO!")))
       (else
	(fire-popup! "bad" (list "CURED: SPECIAL VACCINATION DISCOVERED"
				 "WELL DONE! CAN YOU FIND THREE IN A ROW?"))))))
    (set! new-game-time (+ (time) popup-lifespan))
    (set! reset-game #t)
    parasites)
   ((> (length parasites) parasite-max-pop) ;; lose
    (set! vaccination-run 0)
    (set! new-game-time (+ (time) popup-lifespan))
    (set! reset-game #t)
    (fire-popup! "bad" (list "INFECTION OUT OF CONTROL" "TRY AGAIN"))
    parasites)
   (else
    (parasites-spawn
     (map
      (lambda (p)
	(update-parasite p parasites))
      parasites)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (parasites-search pid parasites)
  (cond
   ((null? parasites) #f)
   ((eq? (parasite-id (car parasites)) pid)
    (car parasites))
   (else
    (parasites-search pid (cdr parasites)))))
   
(define (build-parasites n magic)
  (build-list
   n
   (lambda (_)
     (build-parasite 
      (vadd (vmul (vector (crndf) (crndf) 0) 
		  parasite-create-distance) parasite-swarm-centre)
      magic))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vax lifetime

(define vax-state-idle 0)
(define vax-state-syringe 1)
(define vax-state-chasing 2)

(define (make-vax state pid dest vel pos root collide type rot)
  (list state pid dest vel pos root collide type rot))

(define (vax-state v) (list-ref v 0))
(define (vax-pid v) (list-ref v 1))
(define (vax-dest v) (list-ref v 2))
(define (vax-vel v) (list-ref v 3))
(define (vax-pos v) (list-ref v 4))
(define (vax-root v) (list-ref v 5))
(define (vax-collide v) (list-ref v 6))
(define (vax-type v) (list-ref v 7))
(define (vax-rot v) (list-ref v 8))

(define (build-vax)
  (make-vax
   vax-state-idle -1 (vector 0 0 0) (vector 0 0 0) (vector 0 0 0)
   (with-state
    (hint-nozwrite)
    (texture (load-texture "vax.png"))
    (shader-assign-compiled "vax")
    (load-primitive "models/plane.obj"))
   #f "A" 0))

(define (calc-vax-swarm pos vel dest)
  (let ((v (vmul (vnormalise (vsub pos dest)) vax-speed)))
    (vadd (vmul v vax-inertia)
	  (vmul vel (- 1 vax-inertia))
	  )))

(define (vax-none-chasing? vs)
  (foldl
   (lambda (v r)
     (if (and r (eq? (vax-state v) vax-state-chasing))
	 #f r))
   #t
   vs))

(define (vrndvec-box tl br)
  (vector 
   (+ (vx tl) (* (rndf) (- (vx br) (vx tl))))
   (+ (vy tl) (* (rndf) (- (vy br) (vy tl))))
   0))

(define (vax-inject vs)
  (map
   (lambda (v)
     (cond 
      ((eq? (vax-state v) vax-state-syringe)
       (make-vax
	vax-state-chasing
	-1
	(vector 0 0 0)
	(vector 0 (+ 0.1 (* (rndf) 0.2)) 0)
	(vrndvec-box inject-pos-tl inject-pos-br)
	(vax-root v)
	#f
	(vax-type v)
	(random 360)))
      (else v)))
   vs))

(define (vax-idle vs)
  (map
   (lambda (v)
     (make-vax
      vax-state-idle
      -1
      (vector 0 0 0)
      (vector 0 0 0)
      (vector 0 0 0)
      (vax-root v)
      #f
      (vax-type v)
      (random 360)))
   vs))

(define (vax-in-syringe vs type)
  (define count vax-inject-amount)
  (if (< (rndf) vax-inject-fill-prob)
      (map
       (lambda (v)
	 (cond 
	  ((and (> count 0) (eq? (vax-state v) vax-state-idle))
	   (set! count (- count 1))
	   (with-primitive (vax-root v) (colour (type->col type)))
	   (make-vax
	    vax-state-syringe
	    -1
	    (vector 0 0 0)
	    (vector 0 0 0)
	    (vrndvec-box inject-pos-tl inject-pos-br)
	    (vax-root v)
	    #f type (random 360)))
	  (else v)))
       vs)
      vs))

(define (vax-choose-receptor type receptors)
  (foldl
   (lambda (rec r)
     (if (and (not r) (eq? (receptor-type rec) type))
	 rec r))
   #f receptors))

;; optimisation - might get same one more than once...
(define (random-fold fn init l tries)
  (cond
   ((null? l) init)
   (else
    (let ((ret init))
      (js "for (var i=0; i<tries; i++) {")
      (set! ret (fn (choose l) ret))
      (js "}")
      ret))))

;; returns (pid,receptor)
(define (vax-choose-parasite/receptor type parasites)
  (random-fold
   (lambda (p r)
     (if (and (not r) (eq? (parasite-state p) "alive"))
	 (let ((receptor (vax-choose-receptor type (parasite-receptors p))))
	   (if receptor (list p receptor) #f))
	 r))
   #f
   parasites
   10))

(define (update-vax-swarm vs parasites)
  (map
   (lambda (v)
     (with-primitive
      (vax-root v) 
      (identity)
      (if (eq? (vax-state v) vax-state-idle)
	  (hide #t) (hide #f))
      (if (eq? (vax-pid v) vax-state-syringe) 
	  (translate (vadd (vector (crndf) (crndf) 0) (vax-pos v)))
	  (translate (vax-pos v)))
      (rotate (vector 0 0 (vax-rot v))))
     
     (if (not (eq? (vax-state v) vax-state-chasing))
	 (make-vax
	  (vax-state v)
	  (vax-pid v)
	  (vax-dest v)
	  (vax-vel v) 
	  (vax-pos v) 
	  (vax-root v)
	  #f
	  (vax-type v)
	  (+ (vax-rot v) vax-rot-speed))
	 (let ((p (parasites-search (vax-pid v) parasites)))
	   (cond 
	    ((and p (eq? (parasite-state p) "alive")) ;; still alive - keep chasing
	     (let ((dist (vdist (vax-pos v) (vax-dest v))))
	       (when (< dist vax-collide-distance)	
		     (set! explosions (explosions-add explosions (vax-dest v) (vax-type v))))
	       (make-vax
		(if (< dist vax-collide-distance) 
		    vax-state-idle vax-state-chasing)
		(vax-pid v)
		(vadd (vax-dest v) (parasite-vel p)) 
		(calc-vax-swarm (vax-pos v) (vax-vel v) (vax-dest v))
		(vadd (vax-pos v) (vax-vel v))
		(vax-root v)
		(< dist vax-collide-distance)
		(vax-type v)
		(+ (vax-rot v) vax-rot-speed))))
	    (else ;; it's died (or first time), find a new one...
	     (let ((p (vax-choose-parasite/receptor (vax-type v) parasites)))
	       (if (not p) ;; no new ones exist
		   (make-vax
		    (if (< (rndf) vax-dissolve-prob) vax-state-idle vax-state-chasing) 
		    -1 
		    (vax-dest v)  
		    (calc-vax-swarm (vax-pos v) (vax-vel v) (vax-dest v))
		    (vadd (vax-pos v) (vax-vel v))
		    (vax-root v)
		    #f (vax-type v) (+ (vax-rot v) 1))
		   (let ((parasite (car p)) 
			 (receptor (cadr p)))
		     (with-primitive (vax-root v) (hide #f))
		     (make-vax
		      vax-state-chasing
		      (parasite-id parasite)
		      (vadd 
		       (parasite-pos parasite) 
		       (receptor-pos receptor))
		      (vax-vel v)
		      (vax-pos v)
		      (vax-root v)
		      #f
		      (vax-type v) (+ (vax-rot v) 1))))))))))
   vs))

(define (vax-destroyed-list vs)
  (foldl
   (lambda (v r)
     (cond 
      ((vax-collide v) 
       (cons (vax-pid v) r)) 
      (else r)))
   '()
   vs))

(define (build-vax-swarm n)
  (build-list n (lambda (_) (build-vax))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-explosion pos type age root) (list pos type age root))

(define (explosion-pos e) (list-ref e 0))
(define (explosion-type e) (list-ref e 1))
(define (explosion-age e) (list-ref e 2))
(define (explosion-root e) (list-ref e 3))

(define (build-explosion pos type)
  (make-explosion pos type 0
		  (with-state
		   (hint-nozwrite)
		   (texture (load-texture "explosion.png"))
		   (shader-assign-compiled "explosion")   
		   (colour (type->col type))
		   (load-primitive "models/circlefan.obj"))))

(define (explosion-update e)
  (make-explosion
   (explosion-pos e)
   (explosion-type e)
   (+ (explosion-age e) explosion-speed)
   (explosion-root e)))

(define (explosion-render e)
  (with-primitive
   (explosion-root e)
   (identity)
   (translate (explosion-pos e))
   (let ((sc (* (explosion-age e) (explosion-age e))))
     (scale (vector sc sc sc)))))

(define (explosions-add es pos type)
  (cons (build-explosion pos type) es))

(define (explosions-update es)
  (foldl 
   (lambda (e r)
     (cond 
      ((> (explosion-age e) explosion-max-age)
       (destroy (explosion-root e))
       r)      
      (else
       (cons (explosion-update e) r))))
   '()
   es))

(define (explosions-render es)
  (for-each (lambda (e) (explosion-render e)) es))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")
(shader-compile "parasite" (list "p" "n" "t" "c")
		"shaders/parasite.vert"
		"shaders/parasite.frag")
(shader-compile "receptor" (list "p" "n" "t" "c")
		"shaders/receptor.vert"
		"shaders/receptor.frag")
(shader-compile "vax" (list "p" "n" "t" "c")
		"shaders/vax.vert"
		"shaders/vax.frag")
(shader-compile "explosion" (list "p" "n" "t" "c")
		"shaders/explosion.vert"
		"shaders/explosion.frag")
(shader-compile "title" (list "p" "n" "t" "c")
		"shaders/title.vert"
		"shaders/title.frag")


(load-texture "circle-trans.png")
(load-texture "noise.png")
(load-texture "recep-square.png")
(load-texture "vax.png")
(load-texture "explosion.png")
(load-texture "title.png")

(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/planesmall.obj")
(load-mesh-cache "models/circlefan.obj")
(load-mesh-cache "models/circlemesh.obj")
(load-mesh-cache "models/circlefansmall.obj")
(load-mesh-cache "models/malaria-low.obj")
(load-mesh-cache "models/malaria.obj")
(load-mesh-cache "models/circletiny.obj")
(load-mesh-cache "models/title.obj")

(load-images!
 (list
  "syringe.png"
  "plunger.png"
  "vial.png"
  "vial-a.png"
  "vial-b.png"
  "vial-c.png"
  "vial-d.png"
  "vial-e.png"
  "vial-f.png"
  )
 (lambda ()
   0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define parasites '())
(define vax-swarm '())
(define explosions '())
(define title 0)

(define recep-dummy '())
(define vax-dummy '())

(define current-vax "red")
(define current-magic (if magic-fixed "A" (choose receptor-types)))

(define new-game-time (time))
(define vaccinations 0)
(define warning-fired 0)
(define game-start-time (time))
(define reset-game #t)
(define vaccination-run 0)

(define (reset-game!)
  (msg (length parasites))
  (set! reset-game #f)
  (set! vaccinations 0)
  (set! warning-fired 0)
  (set! game-start-time (time))
  (set! current-magic (if magic-fixed "A" (choose receptor-types)))
  (set! vax-swarm (vax-idle vax-swarm))
  (parasites-destroy-all parasites)
  (set! parasites (build-parasites parasites-start-num current-magic))
  (when (eq? (animated-button-state syringe-button) "filling")
	(set! syringe-button
	      (animated-button-modify-time 
	       (animated-button-modify-state 
		syringe-button "emptying") 0))))

(define syringe-button '())

(define (render-canvas)
  (image-button-update vial1-button 0)
  (image-button-update vial2-button 0)
  (image-button-update vial3-button 0)
  (image-button-update vial4-button 0)
  (image-button-update vial5-button 0)
  (image-button-update vial6-button 0)
  (animated-button-update syringe-button 0)

  (animated-button-render! syringe-button)
  (image-button-render! vial1-button)
  (image-button-render! vial2-button)
  (image-button-render! vial3-button)
  (image-button-render! vial4-button)
  (image-button-render! vial5-button)
  (image-button-render! vial6-button)

  (progress-bar-render! infect-bar)

  (render-popups!)
  )


(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)

  (when (not reset-game)
	(explosions-render explosions))

  (when (> (time) new-game-time)
	(when reset-game (reset-game!))	
	(set! parasites (update-parasites parasites))
	(set! parasites (parasites-death parasites (vax-destroyed-list vax-swarm)))
	(set! parasites (parasites-destroy parasites))
	(let ((p (* (/ (length parasites) parasite-max-pop) 100)))
	  (set! infect-bar (progress-bar-update-p infect-bar (- 100 p)))
	  (when (and (> p 70) (not warning-fired))
		(set! warning-fired #t)
		(fire-popup! "bad" (list "WARNING:" 
					 "INFECTION SPREADING!!")))
	  (when (and warning-fired (< p 70)) 
		(set! warning-fired #f))))
  
  (set! vax-swarm (update-vax-swarm vax-swarm parasites))
  (set! explosions (explosions-update explosions))
  
;  (when (eq? (animated-button-state syringe-button) "filling")
;	(set! vax-swarm (vax-in-syringe vax-swarm current-filling-type)))
  
  (ctx.clearRect 0 0 screen-width screen-height)	  
  (render-canvas)

  (let ((t (* (time) 1)))
    (with-primitive parasite-dummy (shader-shared-uniform! "time" "f" t))
    (with-primitive recep-dummy (shader-shared-uniform! "time" "f" t))
    (with-primitive vax-dummy (shader-shared-uniform! "time" "f" t))
    ;;(with-primitive title (shader-shared-uniform! "time" "f" t))
    )
  
  )

(define init #f)
(define current-filling-type "A")

(define (build-vial x y type)
  (make-image-button 
   x y 
   (cond 
    ((eq? type "A") "vial-a.png")
    ((eq? type "B") "vial-b.png")
    ((eq? type "C") "vial-c.png") 
    ((eq? type "D") "vial-d.png")
    ((eq? type "E") "vial-e.png")
    (else "vial-f.png"))
   "" 
   (lambda (x) 
     (when (and (not reset-game) 
		(not (eq? (animated-button-state syringe-button) "filling")))
	   (when (> (animated-button-time syringe-button) 75)
		 (set! current-filling-type type)
		 (set! vax-swarm (vax-in-syringe vax-swarm current-filling-type))
		 (set! syringe-button
		       (animated-button-modify-time 
			(animated-button-modify-state 
			 syringe-button "filling") 0)))))))

(define inject-pos-tl (vector 0 0 0))
(define inject-pos-br (vector 0 0 0))

(define (run-init)
  (ortho 15)
  (resize-glcanvas webgl-canvas)
  (canvas-setup)
  (resize-canvas canvas)

  (set! vax-swarm (vax-inject (build-vax-swarm vax-swarm-size)))
  (set! parasites (build-parasites parasites-start-num current-magic))

  ;; (set! title (with-state
  ;; 	       (scale (vector 7 7 7))
  ;; 	       (colour (vector 0 0 0))
  ;; 	       (translate (vector 0 0 1))
  ;; 	       (texture (load-texture "title.png"))
  ;; 	       (shader-assign-compiled "title")   
  ;; 	       (load-primitive "models/title.obj")))
  
  (set! recep-dummy (with-state
		     (translate (vector -1000 0 0))
		     (shader-assign-compiled "receptor")   
		     (build-cube)))
  (set! vax-dummy (with-state
		     (translate (vector -1000 0 0))
		     (shader-assign-compiled "vax")   
		     (build-cube)))
  (set! parasite-dummy (with-state
			(translate (vector -1000 0 0))
			(shader-assign-compiled "parasite")   
			(build-cube)))

  (let ((ypos (- screen-height 80))
	(spos (vector (/ screen-width 2) (- screen-height 160) 0)))
    (set! vial1-button (build-vial (- (/ screen-width 2) 200) ypos "A"))
    (set! vial2-button (build-vial (- (/ screen-width 2) 100) ypos "B"))
    (set! vial3-button (build-vial (+ (/ screen-width 2) 100) ypos "C"))
    (set! vial4-button (build-vial (+ (/ screen-width 2) 200) ypos "D"))
    (set! vial5-button (build-vial (+ (/ screen-width 2) 300) ypos "E"))
    (set! vial6-button (build-vial (- (/ screen-width 2) 300) ypos "F"))
    (set! infect-bar (make-progress-bar 30 10 (- screen-width 60) 30 "HEALTH:" "20pt Amatic" 50))
    

    (set! syringe-button 
	  (make-animated-button 
	   (vx spos) (vy spos)
	   "syringe.png" 
	   "plunger.png" 
	   (lambda (x) 
	     (when (and
		    (> (animated-button-time syringe-button) 75)
		    (not reset-game) 
		    (eq? (animated-button-state syringe-button) "filling"))
		   (set! vaccinations (+ vaccinations 1))
		   (set! syringe-button
			 (animated-button-modify-time 
			  (animated-button-modify-state 
			   syringe-button "emptying") 
			  0))
		   (set! vax-swarm (vax-inject vax-swarm))
		   ))))

    (let ((top-left (vector (- (vx spos) (animated-button-width syringe-button))
		     (- (vy spos) (animated-button-height syringe-button))
		     0)))
      (set! inject-pos-tl 
	    (unproject-point-ortho (vadd top-left (vector 19 87 0))))
      (set! inject-pos-br 
	    (unproject-point-ortho (vadd top-left (vector 43 163 0))))))
  
  
  ;;(set-camera-transform (mtranslate (camera-transform) (vector 0 5 0)))
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (start)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  (canvas-loaded?)
	  )
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

(resize-canvas canvas)
(ctx.fillText "Loading..." 100 100)

(every-frame (start))
	 
